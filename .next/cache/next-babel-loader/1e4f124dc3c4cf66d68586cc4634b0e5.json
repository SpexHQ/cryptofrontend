{"ast":null,"code":"var _jsxFileName = \"/Users/horsthoyzer/Desktop/cryptofrontend/src/pages/LoginScreen.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react'; // Connect to the context (i.e, global state)\n\nimport { UserContext } from './UserContext'; // RegEx (Regular Expressions)\n\nvar validateEmail = function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nvar validatePassword = function validatePassword(password) {\n  var re = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,16}$/;\n  return re.test(password);\n};\n\nfunction LoginScreen() {\n  _s();\n\n  // \"initial\", \"sending\", \"successful\", \"unsuccessful\"\n  var _useState = useState(\"initial\"),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useContext = useContext(UserContext),\n      updateUser = _useContext.updateUser; // Declare undefined variables for later assignment (ref props)\n\n\n  var emailField;\n  var passwordField; // To instantiate a FormData object\n\n  var formData = new FormData();\n\n  var login = function login() {\n    var errors = []; // 1. Validate the fields\n\n    if (!validateEmail(emailField.value)) {\n      errors.push(\"Please enter a valid email address\");\n    }\n\n    if (!validatePassword(passwordField.value)) {\n      errors.push(\"Please enter a valid password\");\n    } // 1.1 If there are errors, set the state to \"validation error\"\n\n\n    if (errors.length > 0) {\n      setState(\"validation error\");\n    } // 1.2 If there are no errors, set the state to \"sending\"\n    else {\n        setState(\"sending\");\n        formData.append('email', emailField.value);\n        formData.append('password', passwordField.value);\n        fetch(\"http://localhost:3001/user/login\", {\n          method: 'POST',\n          // headers: {\"Content-Type\": \"application/json\"},\n          body: formData\n        }) // 2.1 If the submission is successful, set the state \"successful\"\n        .then(function (backendResponse) {\n          return backendResponse.json();\n        }).then(function (theJson) {\n          console.log(theJson);\n          updateUser({\n            jsonwebtoken: theJson.jsonwebtoken,\n            firstName: theJson.firstName,\n            lastName: theJson.lastName,\n            email: theJson.email,\n            avatar: theJson.avatar\n          });\n          setState(\"successful\");\n        }) // 2.2 If the submission is unsuccessful, set the state \"unsuccessful\"\n        [\"catch\"](function (error) {\n          console.log(error);\n          setState(\"unsuccessful\");\n        });\n      }\n  };\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    style: {\n      maxWidth: 600,\n      minHeight: 'calc(100vh - 112px)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: \"py-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Login\"), __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    \"for\": \"email\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Email address\"), __jsx(\"input\", {\n    ref: function ref(elem) {\n      return emailField = elem;\n    },\n    type: \"email\",\n    className: \"form-control\",\n    id: \"email\",\n    \"aria-describedby\": \"emailHelp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    id: \"emailHelp\",\n    className: \"form-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"We'll never share your email with anyone else.\")), __jsx(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    \"for\": \"password\",\n    className: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Password\"), __jsx(\"input\", {\n    ref: function ref(elem) {\n      return passwordField = elem;\n    },\n    type: \"password\",\n    className: \"form-control\",\n    id: \"password\",\n    \"aria-describedby\": \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })), state !== \"sending\" && state !== \"successful\" && __jsx(\"button\", {\n    onClick: login,\n    className: \"btn btn-primary mb-3\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Submit\"), state === \"validation error\" && __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Incorrect email or password.\"), state === \"successful\" && __jsx(\"div\", {\n    className: \"alert alert-success\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"You have registered successfully!\"), state === \"unsuccessful\" && __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"Internal error. Please try again later.\"), state === \"sending\" && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"Loading...\"));\n}\n\n_s(LoginScreen, \"vlP16qWcFxZFq3vMQ++lljwM9Ig=\");\n\n_c = LoginScreen;\nexport default LoginScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginScreen\");","map":{"version":3,"sources":["/Users/horsthoyzer/Desktop/cryptofrontend/src/pages/LoginScreen.js"],"names":["React","useState","useContext","UserContext","validateEmail","email","re","test","validatePassword","password","LoginScreen","state","setState","updateUser","emailField","passwordField","formData","FormData","login","errors","value","push","length","append","fetch","method","body","then","backendResponse","json","theJson","console","log","jsonwebtoken","firstName","lastName","avatar","error","maxWidth","minHeight","elem"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\n// Connect to the context (i.e, global state)\nimport {UserContext} from './UserContext';\n\n\n// RegEx (Regular Expressions)\nconst validateEmail = (email) => {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nconst validatePassword = (password) => {\n    const re = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,16}$/;\n    return re.test(password);\n}\n\nfunction LoginScreen() {\n\n    // \"initial\", \"sending\", \"successful\", \"unsuccessful\"\n    const [state, setState] = useState(\"initial\");\n    const { updateUser } = useContext(UserContext);\n    \n    // Declare undefined variables for later assignment (ref props)\n    let emailField;\n    let passwordField;\n\n    // To instantiate a FormData object\n    const formData = new FormData();\n\n    const login = () => {\n\n        const errors = [];\n\n        // 1. Validate the fields\n        if(!validateEmail(emailField.value)) {\n            errors.push(\"Please enter a valid email address\");\n        }\n        if(!validatePassword(passwordField.value)) {\n            errors.push(\"Please enter a valid password\");\n        }\n\n        // 1.1 If there are errors, set the state to \"validation error\"\n        if(errors.length > 0) {\n            setState(\"validation error\");\n        }\n        // 1.2 If there are no errors, set the state to \"sending\"\n        else {\n            setState(\"sending\");\n\n            formData.append('email', emailField.value);\n            formData.append('password', passwordField.value);\n\n            fetch(`http://localhost:3001/user/login`, {\n                method: 'POST',\n                // headers: {\"Content-Type\": \"application/json\"},\n                body: formData\n            })\n            // 2.1 If the submission is successful, set the state \"successful\"\n            .then((backendResponse)=> backendResponse.json())\n            .then((theJson)=>{\n                console.log(theJson);\n\n                updateUser(\n                    {\n                        jsonwebtoken: theJson.jsonwebtoken,\n                        firstName: theJson.firstName,\n                        lastName: theJson.lastName,\n                        email: theJson.email,\n                        avatar: theJson.avatar\n                    }\n                )\n                setState(\"successful\");\n            })\n            // 2.2 If the submission is unsuccessful, set the state \"unsuccessful\"\n            .catch((error)=>{\n                console.log(error);\n                setState(\"unsuccessful\");\n            });\n        }\n    }\n\n    return (\n        <div className=\"container\" style={{maxWidth: 600, minHeight: 'calc(100vh - 112px)'}}>\n\n            <h1 className=\"py-5\">Login</h1>\n\n            <div className=\"mb-3\">\n                <label for=\"email\" className=\"form-label\">Email address</label>\n                <input ref={ (elem)=>emailField = elem } type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" />\n                <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\n            </div>\n\n            <div className=\"mb-3\">\n                <label for=\"password\" className=\"form-label\">Password</label>\n                <input ref={ (elem)=>passwordField = elem } type=\"password\" className=\"form-control\" id=\"password\" aria-describedby=\"password\" />\n            </div>\n\n            {\n                state !== \"sending\" && state !== \"successful\" &&\n                <button \n                onClick={login}\n                className=\"btn btn-primary mb-3\" type=\"button\">Submit</button>\n            }\n\n            { \n                state === \"validation error\" &&\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Incorrect email or password.\n                </div>\n            }\n\n            {\n                state === \"successful\" &&\n                <div className=\"alert alert-success\" role=\"alert\">\n                    You have registered successfully!\n                </div>\n            }\n\n            {\n                state === \"unsuccessful\" &&\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Internal error. Please try again later.\n                </div>\n            }\n\n            {\n                state === \"sending\" &&\n                <p>Loading...</p>\n            }\n        </div>\n    )\n}\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}